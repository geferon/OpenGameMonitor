// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpenGameMonitorLibraries;

namespace Core.OpenGameMonitorWorker.Migrations
{
    [DbContext(typeof(MonitorDBContext))]
    [Migration("20190927214449_InitialCreation")]
    partial class InitialCreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("OpenGameMonitorLibraries.Game", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Engine")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<uint>("SteamID");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("OpenGameMonitorLibraries.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("OpenGameMonitorLibraries.GroupUser", b =>
                {
                    b.Property<string>("UserID");

                    b.Property<int>("GroupID");

                    b.HasKey("UserID", "GroupID");

                    b.HasIndex("GroupID");

                    b.ToTable("GroupUser");
                });

            modelBuilder.Entity("OpenGameMonitorLibraries.Server", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Branch")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(40)")
                        .HasDefaultValue("public");

                    b.Property<string>("BranchPassword");

                    b.Property<bool?>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Executable")
                        .IsRequired();

                    b.Property<string>("GameId")
                        .IsRequired();

                    b.Property<bool?>("Graceful")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<int>("GroupId");

                    b.Property<DateTime>("LastStart");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<bool>("LastUpdateFailed");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("OwnerUsername")
                        .IsRequired();

                    b.Property<int>("PID");

                    b.Property<string>("Path")
                        .IsRequired();

                    b.Property<int>("UpdatePID");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("GroupId");

                    b.HasIndex("OwnerUsername");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("OpenGameMonitorLibraries.Setting", b =>
                {
                    b.Property<string>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Key");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("OpenGameMonitorLibraries.User", b =>
                {
                    b.Property<string>("Username")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Admin")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Language")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(2)")
                        .HasDefaultValue("en");

                    b.HasKey("Username");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OpenGameMonitorLibraries.GroupUser", b =>
                {
                    b.HasOne("OpenGameMonitorLibraries.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OpenGameMonitorLibraries.User", "User")
                        .WithMany("Groups")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OpenGameMonitorLibraries.Server", b =>
                {
                    b.HasOne("OpenGameMonitorLibraries.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OpenGameMonitorLibraries.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OpenGameMonitorLibraries.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerUsername")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
